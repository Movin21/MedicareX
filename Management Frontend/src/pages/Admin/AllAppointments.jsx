import React, { useEffect, useContext } from "react";
import { assets } from "../../assets/assets";
import { AdminContext } from "../../context/AdminContext";
import { AppContext } from "../../context/AppContext";
import jsPDF from "jspdf";

const AllAppointments = () => {
  const { aToken, appointments, cancelAppointment, getAllAppointments } =
    useContext(AdminContext);
  const { slotDateFormat, calculateAge, currency } = useContext(AppContext);

  useEffect(() => {
    if (aToken) {
      getAllAppointments();
    }
  }, [aToken]);

  const generateRevenueReport = () => {
    const doc = new jsPDF();
    const primaryColor = "#580700";
    const secondaryColor = "#B22222";

    // Convert the logo to a data URL
    const logo = new Image();
    logo.src = assets.admin_logo;
    const canvas = document.createElement("canvas");
    const ctx = canvas.getContext("2d");
    canvas.width = logo.width;
    canvas.height = logo.height;
    ctx.drawImage(logo, 0, 0);
    const logoDataUrl = canvas.toDataURL("image/png");

    // Add logo and report details
    doc.addImage(logoDataUrl, "PNG", 14, 10, 70, 25);
    doc.setFontSize(12);
    doc.setTextColor(100);
    doc.text("MedicareX", 14, 38);
    doc.text("123 Health St., City, Country", 14, 43);
    doc.text("Contact: +1 123 456 7890", 14, 48);
    doc.text("Email: support@medicarex.com", 14, 53);

    // Add horizontal line
    doc.setDrawColor(primaryColor);
    doc.line(14, 58, 196, 58);

    // Report title
    doc.setFontSize(18);
    doc.setTextColor(primaryColor);
    doc.text("Revenue Report", 14, 70);

    // Add generated date
    const today = new Date();
    const dateStr = today.toLocaleDateString();
    doc.setFontSize(10);
    doc.setTextColor(100);
    doc.text(`Generated on: ${dateStr}`, 196, 70, null, null, "right");

    // Summary statistics
    const totalAppointments = appointments.length;
    const completedAppointments = appointments.filter(
      (a) => a.isCompleted && !a.cancelled
    ).length;
    const cancelledAppointments = appointments.filter(
      (a) => a.cancelled
    ).length;

    doc.setFontSize(12);
    doc.setTextColor(secondaryColor);
    doc.text(`Total Appointments: ${totalAppointments}`, 14, 80);
    doc.text(`Completed Appointments: ${completedAppointments}`, 14, 85);
    doc.text(`Cancelled Appointments: ${cancelledAppointments}`, 14, 90);

    // Table header
    doc.setFontSize(12);
    doc.setTextColor(255, 255, 255);
    doc.setFillColor(primaryColor);
    doc.rect(14, 100, 182, 10, "F");
    doc.text("Date", 16, 107);
    doc.text("Patient", 50, 107);
    doc.text("Doctor", 100, 107);
    doc.text("Amount", 150, 107);

    let yPos = 115;
    let totalRevenue = 0;

    appointments.forEach((item, index) => {
      if (!item.cancelled && item.isCompleted) {
        if (yPos > 280) {
          doc.addPage();
          yPos = 20;

          // Add header to new page
          doc.setFillColor(primaryColor);
          doc.rect(14, yPos, 182, 10, "F");
          doc.setTextColor(255, 255, 255);
          doc.text("Date", 16, yPos + 7);
          doc.text("Patient", 50, yPos + 7);
          doc.text("Doctor", 100, yPos + 7);
          doc.text("Amount", 150, yPos + 7);
          yPos += 15;
        }

        doc.setTextColor(0);
        doc.text(slotDateFormat(item.slotDate), 16, yPos);
        doc.text(item.userData.name.substring(0, 20), 50, yPos);
        doc.text(item.docData.name.substring(0, 20), 100, yPos);
        doc.text(`${currency}${item.amount}`, 150, yPos);

        totalRevenue += parseFloat(item.amount);
        yPos += 10;
      }
    });

    // Final total revenue
    yPos += 10;
    doc.setFontSize(14);
    doc.setTextColor(primaryColor);
    doc.text(`Total Revenue: ${currency}${totalRevenue.toFixed(2)}`, 14, yPos);

    // Add footer with page numbers and company details
    const pageCount = doc.internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(10);
      doc.setTextColor(100);
      doc.text(`Page ${i} of ${pageCount}`, 196, 285, null, null, "right");
      doc.text("Generated by MedicareX", 14, 285);
      doc.text("www.medicarex.com", 14, 290);
    }

    return doc;
  };

  const downloadRevenueReport = () => {
    const doc = generateRevenueReport();
    doc.save("MedicareX_Revenue_Report.pdf");
  };

  return (
    <div className="w-full max-w-6xl m-5 ">
      <div className="flex justify-between items-center mb-3">
        <p className="text-lg font-medium">All Appointments</p>
        <button
          onClick={downloadRevenueReport}
          className="bg-[#580700] hover:bg-[#3d0500] text-white font-bold py-2 px-4 rounded"
        >
          Download Revenue Report
        </button>
      </div>
      <div className="bg-white border rounded text-sm max-h-[80vh] overflow-y-scroll">
        <div className="hidden sm:grid grid-cols-[0.5fr_3fr_1fr_3fr_3fr_1fr_1fr] grid-flow-col py-3 px-6 border-b">
          <p>#</p>
          <p>Patient</p>
          <p>Age</p>
          <p>Date & Time</p>
          <p>Doctor</p>
          <p>Fees</p>
          <p>Action</p>
        </div>
        {appointments.map((item, index) => (
          <div
            className="flex flex-wrap justify-between max-sm:gap-2 sm:grid sm:grid-cols-[0.5fr_3fr_1fr_3fr_3fr_1fr_1fr] items-center text-gray-500 py-3 px-6 border-b hover:bg-gray-50"
            key={index}
          >
            <p className="max-sm:hidden">{index + 1}</p>
            <div className="flex items-center gap-2">
              <img
                src={item.userData.image}
                className="w-8 rounded-full"
                alt=""
              />{" "}
              <p>{item.userData.name}</p>
            </div>
            <p className="max-sm:hidden">{calculateAge(item.userData.dob)}</p>
            <p>
              {slotDateFormat(item.slotDate)}, {item.slotTime}
            </p>
            <div className="flex items-center gap-2">
              <img
                src={item.docData.image}
                className="w-8 rounded-full bg-gray-200"
                alt=""
              />{" "}
              <p>{item.docData.name}</p>
            </div>
            <p>
              {currency}
              {item.amount}
            </p>
            {item.cancelled ? (
              <p className="text-red-700 text-xs font-medium">Cancelled</p>
            ) : item.isCompleted ? (
              <p className="text-green-700 text-xs font-medium">Completed</p>
            ) : (
              <img
                onClick={() => cancelAppointment(item._id)}
                className="w-10 cursor-pointer"
                src={assets.cancel_icon}
                alt=""
              />
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

export default AllAppointments;
